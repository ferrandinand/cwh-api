// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrandinand/cwh-api/domain (interfaces: UserRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/ferrandinand/cwh-api/domain"
	errs "github.com/ferrandinand/cwh-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockUserRepository) ById(arg0 string) (*domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockUserRepositoryMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockUserRepository)(nil).ById), arg0)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(arg0 string) (*domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), arg0)
}

// FindAll mocks base method.
func (m *MockUserRepository) FindAll(arg0 string) ([]domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll), arg0)
}

// NewUser mocks base method.
func (m *MockUserRepository) NewUser(arg0 domain.User) (*domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockUserRepositoryMockRecorder) NewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserRepository)(nil).NewUser), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(arg0 string, arg1 domain.User) (*domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), arg0, arg1)
}
