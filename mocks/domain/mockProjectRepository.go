// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrandinand/cwh-api/domain (interfaces: ProjectRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/ferrandinand/cwh-api/domain"
	errs "github.com/ferrandinand/cwh-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockProjectRepository) ById(arg0 string) (*domain.Project, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockProjectRepositoryMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockProjectRepository)(nil).ById), arg0)
}

// FindAll mocks base method.
func (m *MockProjectRepository) FindAll(arg0 string) ([]domain.Project, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]domain.Project)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProjectRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProjectRepository)(nil).FindAll), arg0)
}

// Save mocks base method.
func (m *MockProjectRepository) Save(arg0 domain.Project) (*domain.Project, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockProjectRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProjectRepository)(nil).Save), arg0)
}

// SaveGroup mocks base method.
func (m *MockProjectRepository) SaveGroup(arg0 domain.Group) (*domain.Group, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGroup", arg0)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// SaveGroup indicates an expected call of SaveGroup.
func (mr *MockProjectRepositoryMockRecorder) SaveGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGroup", reflect.TypeOf((*MockProjectRepository)(nil).SaveGroup), arg0)
}
