// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrandinand/cwh-api/domain (interfaces: ServiceOrderRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/ferrandinand/cwh-api/domain"
	errs "github.com/ferrandinand/cwh-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceOrderRepository is a mock of ServiceOrderRepository interface.
type MockServiceOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOrderRepositoryMockRecorder
}

// MockServiceOrderRepositoryMockRecorder is the mock recorder for MockServiceOrderRepository.
type MockServiceOrderRepositoryMockRecorder struct {
	mock *MockServiceOrderRepository
}

// NewMockServiceOrderRepository creates a new mock instance.
func NewMockServiceOrderRepository(ctrl *gomock.Controller) *MockServiceOrderRepository {
	mock := &MockServiceOrderRepository{ctrl: ctrl}
	mock.recorder = &MockServiceOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOrderRepository) EXPECT() *MockServiceOrderRepositoryMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockServiceOrderRepository) ById(arg0 string) (*domain.ServiceOrder, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*domain.ServiceOrder)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockServiceOrderRepositoryMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockServiceOrderRepository)(nil).ById), arg0)
}

// FindAll mocks base method.
func (m *MockServiceOrderRepository) FindAll(arg0, arg1 string) ([]domain.ServiceOrder, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]domain.ServiceOrder)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServiceOrderRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockServiceOrderRepository)(nil).FindAll), arg0, arg1)
}

// Save mocks base method.
func (m *MockServiceOrderRepository) Save(arg0 domain.ServiceOrder) (*domain.ServiceOrder, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*domain.ServiceOrder)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockServiceOrderRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServiceOrderRepository)(nil).Save), arg0)
}
