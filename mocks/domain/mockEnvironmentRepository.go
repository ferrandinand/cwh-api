// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrandinand/cwh-api/domain (interfaces: EnvironmentRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/ferrandinand/cwh-api/domain"
	errs "github.com/ferrandinand/cwh-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockEnvironmentRepository is a mock of EnvironmentRepository interface.
type MockEnvironmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentRepositoryMockRecorder
}

// MockEnvironmentRepositoryMockRecorder is the mock recorder for MockEnvironmentRepository.
type MockEnvironmentRepositoryMockRecorder struct {
	mock *MockEnvironmentRepository
}

// NewMockEnvironmentRepository creates a new mock instance.
func NewMockEnvironmentRepository(ctrl *gomock.Controller) *MockEnvironmentRepository {
	mock := &MockEnvironmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentRepository) EXPECT() *MockEnvironmentRepositoryMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockEnvironmentRepository) ById(arg0 string) (*domain.Environment, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*domain.Environment)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockEnvironmentRepositoryMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockEnvironmentRepository)(nil).ById), arg0)
}

// FindAll mocks base method.
func (m *MockEnvironmentRepository) FindAll(arg0 int, arg1 string, arg2 int) (domain.EnvironmentList, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.EnvironmentList)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEnvironmentRepositoryMockRecorder) FindAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEnvironmentRepository)(nil).FindAll), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockEnvironmentRepository) Save(arg0 domain.Environment) (*domain.Environment, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*domain.Environment)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockEnvironmentRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEnvironmentRepository)(nil).Save), arg0)
}
