// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrandinand/cwh-api/service (interfaces: ProjectService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	dto "github.com/ferrandinand/cwh-api/dto"
	errs "github.com/ferrandinand/cwh-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// GetAllProject mocks base method.
func (m *MockProjectService) GetAllProject(arg0 string) ([]dto.ProjectResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProject", arg0)
	ret0, _ := ret[0].([]dto.ProjectResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllProject indicates an expected call of GetAllProject.
func (mr *MockProjectServiceMockRecorder) GetAllProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProject", reflect.TypeOf((*MockProjectService)(nil).GetAllProject), arg0)
}

// GetProject mocks base method.
func (m *MockProjectService) GetProject(arg0 string) (*dto.ProjectResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*dto.ProjectResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectServiceMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectService)(nil).GetProject), arg0)
}

// NewProject mocks base method.
func (m *MockProjectService) NewProject(arg0 dto.NewProjectRequest) (*dto.ProjectResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProject", arg0)
	ret0, _ := ret[0].(*dto.ProjectResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// NewProject indicates an expected call of NewProject.
func (mr *MockProjectServiceMockRecorder) NewProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProject", reflect.TypeOf((*MockProjectService)(nil).NewProject), arg0)
}
