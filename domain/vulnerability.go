package domain

import (
	"time"

	"bitbucket.org/iccgit/icc-cwh-backstage/cwh-api/dto"
	"bitbucket.org/iccgit/icc-cwh-backstage/cwh-api/lib/errs"
	"github.com/jmoiron/sqlx"
)

type VulnerabilitytList struct {
	Items      []Vulnerability `json:"items"`
	NextPageID int             `json:"next_page_id,omitempty" example:"10"`
	PrevPageID int             `json:"prev_page_id,omitempty" example:"10"`
}

type Vulnerability struct {
	Id              int       `db:"id_vulnerability"`
	ProjectWithEnv  string    `db:"project_env"`
	Project         string    `db:"project"`
	Cluster         string    `db:"cluster"`
	AppName         string    `db:"app_name"`
	Registry        string    `db:"registry"`
	Image           string    `db:"image"`
	Installation    int       `db:"installation"`
	ReportedOn      string    `db:"reported_on"`
	Tenant          string    `db:"tenant"`
	Critical        int       `db:"critical"`
	High            int       `db:"high"`
	Medium          int       `db:"medium"`
	Low             int       `db:"low"`
	None            int       `db:"none_count"`
	Unknown         int       `db:"unknown"`
	Vulnerabilities JSONField `db:"vulnerabilities"`
}

func (c Vulnerability) ToDto() dto.VulnerabilityResponse {
	return dto.VulnerabilityResponse{
		ProjectWithEnv:  c.ProjectWithEnv,
		Project:         c.Project,
		Cluster:         c.Cluster,
		AppName:         c.AppName,
		Registry:        c.Registry,
		Image:           c.Image,
		Installation:    c.Installation,
		ReportedOn:      c.ReportedOn,
		Tenant:          c.Tenant,
		Critical:        c.Critical,
		High:            c.High,
		Medium:          c.Medium,
		Low:             c.Low,
		None:            c.None,
		Unknown:         c.Unknown,
		Vulnerabilities: c.Vulnerabilities,
	}
}

type VulnerabilityRepository interface {
	FindAll(pageId int) (VulnerabilitytList, *errs.AppError)
	ById(projectId string) (VulnerabilitytList, *errs.AppError)
}

func NewVulnerability(
	projectWithEnv string,
	project string,
	cluster string,
	appName string,
	registry string,
	image string,
	installation int,
	tenant string,
	critical int,
	high int,
	medium int,
	low int,
	none int,
	unknown int,
	vulnerabilities JSONField,
) Vulnerability {

	return Vulnerability{
		ProjectWithEnv:  projectWithEnv,
		Project:         project,
		Cluster:         cluster,
		AppName:         appName,
		Registry:        registry,
		Image:           image,
		Installation:    installation,
		ReportedOn:      time.Now().Format("2006-01-02 15:04:05"),
		Tenant:          tenant,
		Critical:        critical,
		High:            high,
		Medium:          medium,
		None:            none,
		Unknown:         unknown,
		Vulnerabilities: vulnerabilities,
	}
}

func NewVulnerabilityRepositoryDb(dbClient *sqlx.DB) VulnerabilityRepositoryDb {
	return VulnerabilityRepositoryDb{dbClient}
}
