package service

import (
	"bitbucket.org/iccgit/icc-cwh-backstage/cwh-api/domain"
	"bitbucket.org/iccgit/icc-cwh-backstage/cwh-api/dto"
	"bitbucket.org/iccgit/icc-cwh-backstage/cwh-api/lib/errs"
)

type VulnerabilityService interface {
	GetVulnerability(projectId string) (dto.VulnerabilityResponseList, *errs.AppError)
	GetAllVulnerability(ProjectpageId int) (dto.VulnerabilityResponseList, *errs.AppError)
}

type DefaultVulnerabilityService struct {
	repo domain.VulnerabilityRepository
}

func (s DefaultVulnerabilityService) GetVulnerability(id string) (dto.VulnerabilityResponseList, *errs.AppError) {
	var response dto.VulnerabilityResponseList

	vulnerabilities, err := s.repo.ById(id)
	if err != nil {
		return response, err
	}
	vulnerabilitiesResponseItems := make([]dto.VulnerabilityResponse, 0)
	for _, c := range vulnerabilities.Items {
		vulnerabilitiesResponseItems = append(vulnerabilitiesResponseItems, c.ToDto())
	}

	response.Items = vulnerabilitiesResponseItems
	return response, nil
}

func (s DefaultVulnerabilityService) GetAllVulnerability(pageId int) (dto.VulnerabilityResponseList, *errs.AppError) {
	var response dto.VulnerabilityResponseList

	vulnerabilities, err := s.repo.FindAll(pageId)
	if err != nil {
		return response, err
	}

	vulnerabilitiesResponseItems := make([]dto.VulnerabilityResponse, 0)
	for _, c := range vulnerabilities.Items {
		vulnerabilitiesResponseItems = append(vulnerabilitiesResponseItems, c.ToDto())
	}

	response.NextPageID = vulnerabilities.NextPageID
	response.Items = vulnerabilitiesResponseItems

	return response, err
}

func NewVulnerabilityService(repository domain.VulnerabilityRepository) DefaultVulnerabilityService {
	return DefaultVulnerabilityService{repository}
}
